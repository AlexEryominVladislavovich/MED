# Generated by Django 5.2.1 on 2025-06-03 12:09

import django.core.validators
import django.db.models.deletion
import doctor.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_specialization', models.CharField(max_length=30, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Название специализации')),
                ('description_specialization', models.TextField(verbose_name='Описание специализации')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patronymic', models.CharField(blank=True, max_length=50, verbose_name='Отчество')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=doctor.models.doctor_photo_path, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp']), doctor.models.validate_image_size], verbose_name='Фотография')),
                ('room_number', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='Формат кабинета: 3 цифры + опциональная буква (например: 101, 201А)', regex='^\\d{3}[A-Za-z]?$')], verbose_name='Номер кабинета')),
                ('bio', models.TextField(validators=[django.core.validators.MaxLengthValidator(1000, message='Биография не должна превышать 1000 символов')], verbose_name='Биография')),
                ('phone_number', models.CharField(max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='Номер телефона начинается с +996 и должен содержать 9 цифр после кода страны(Пример: +996 700123456)', regex='^\\+996(22\\d|55\\d|70\\d|99\\d|77\\d|54\\d|51\\d|57\\d|56\\d|50\\d)\\d{6}$')], verbose_name='Номер телефона')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('specialization', models.ManyToManyField(to='doctor.specialization', verbose_name='Специализации')),
            ],
            options={
                'verbose_name': 'Врач',
                'verbose_name_plural': 'Врачи',
            },
        ),
        migrations.CreateModel(
            name='DoctorPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=doctor.models.doctor_gallery_photo_path, validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'webp']), doctor.models.validate_image_size], verbose_name='Фотография')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='doctor.doctor', verbose_name='Врач')),
            ],
            options={
                'verbose_name': 'Фотография врача',
                'verbose_name_plural': 'Фотографии врача',
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days_of_week', models.JSONField(default=list, help_text='Список дней недели (1-7, где 1 - Понедельник, 7 - Воскресенье)', verbose_name='Дни недели')),
                ('day_of_week', models.IntegerField(blank=True, choices=[(1, 'Понедельник'), (2, 'Вторник'), (3, 'Среда'), (4, 'Четверг'), (5, 'Пятница'), (6, 'Суббота'), (7, 'Воскресенье')], null=True, verbose_name='День недели')),
                ('start_time', models.TimeField(verbose_name='Начало работы')),
                ('end_time', models.TimeField(verbose_name='Конец работы')),
                ('break_start', models.TimeField(blank=True, null=True, verbose_name='Начало перерыва')),
                ('break_end', models.TimeField(blank=True, null=True, verbose_name='Конец перерыва')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='schedule_templates', to='doctor.doctor', verbose_name='Врач')),
            ],
            options={
                'verbose_name': 'Шаблон расписания',
                'verbose_name_plural': 'Шаблоны расписания',
                'unique_together': {('doctor', 'day_of_week')},
            },
        ),
        migrations.CreateModel(
            name='TemplateTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('duration', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(55)], verbose_name='Длительность (минут)')),
                ('slot_type', models.CharField(choices=[('consultation', 'Консультация'), ('treatment', 'Лечение')], max_length=20, verbose_name='Тип слота')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='template_slots', to='doctor.scheduletemplate', verbose_name='Шаблон')),
            ],
            options={
                'verbose_name': 'Временной слот шаблона',
                'verbose_name_plural': 'Временные слоты шаблона',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('duration', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(55)], verbose_name='Длительность (минут)')),
                ('slot_type', models.CharField(choices=[('consultation', 'Консультация'), ('treatment', 'Лечение')], max_length=20, verbose_name='Тип слота')),
                ('is_available', models.BooleanField(default=True, verbose_name='Доступен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='doctor.doctor', verbose_name='Врач')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='time_slots', to='doctor.scheduletemplate', verbose_name='Шаблон')),
            ],
            options={
                'verbose_name': 'Временной слот',
                'verbose_name_plural': 'Временные слоты',
                'ordering': ['date', 'start_time'],
                'permissions': [('can_manage_slots', 'Can manage time slots')],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(1, 'Понедельник'), (2, 'Вторник'), (3, 'Среда'), (4, 'Четверг'), (5, 'Пятница'), (6, 'Суббота'), (7, 'Воскресенье')], verbose_name='День недели')),
                ('start_time', models.TimeField(verbose_name='Время начала работы')),
                ('end_time', models.TimeField(verbose_name='Время окончания работы')),
                ('break_start', models.TimeField(blank=True, null=True, verbose_name='Начало перерыва')),
                ('break_end', models.TimeField(blank=True, null=True, verbose_name='Конец перерыва')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='doctor.doctor', verbose_name='Врач')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedules', to='doctor.scheduletemplate', verbose_name='Шаблон расписания')),
            ],
            options={
                'verbose_name': 'Расписание',
                'verbose_name_plural': 'Расписания',
                'unique_together': {('doctor', 'day_of_week')},
            },
        ),
        migrations.AddConstraint(
            model_name='doctor',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('room_number',), name='unique_active_doctor_room'),
        ),
        migrations.AlterUniqueTogether(
            name='templatetimeslot',
            unique_together={('template', 'start_time')},
        ),
        migrations.AddConstraint(
            model_name='timeslot',
            constraint=models.UniqueConstraint(fields=('doctor', 'date', 'start_time'), name='unique_doctor_timeslot'),
        ),
    ]
